<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>TeLis Video Classroom</title>

    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="./../../bootstrap.min.css">
    <link rel="stylesheet" href="./../../style.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <!-- Add SimplePeer library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/simple-peer/9.11.1/simplepeer.min.js"></script>
</head>

<body>
    <main class="container-fluid d-flex flex-column home-wrap">
        <div id="meetingbox" style="display:none;">
            <p>No meeting joined! <a id='meetingid' href="#"></a></p>
        </div>

        <div class="g-top text-light">
            <div class="top-remote-video-show-wrap d-flex flex-wrap">
                <!-- Video Section -->
                <div id="meetingContainer" style="display:none;flex-basis:75%;">
                    <h1 id='meetingname'></h1>
                    <div class="call-wrap bg-black p-2">
                        <div id='divUsers' class="video-wrap d-flex flex-wrap">
                            <!-- Local video -->
                            <div id="me" class="userbox d-flex flex-column align-items-center m-1">
                                <h2 class="user-name text-center" style="font-size:14px;"></h2>
                                <video id="localVideoCtr" autoplay muted playsinline class="video-box"></video>
                            </div>
                            <!-- Remote template -->
                            <div id="remoteTemplate" class="userbox d-flex flex-column align-items-center m-1" style="display:none">
                                <h5 class="user-name text-center" style="font-size:14px;"></h5>
                                <video autoplay playsinline class="video-box"></video>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Sidebar -->
                <div id="sidebar" class="g-right-details-wrap bg-light text-secondary h-100 p-2" style="flex-basis:25%;">
                    <h5>Participants</h5>
                    <ul id="participantsList" class="list-group mb-2"></ul>
                    <h5>Chat</h5>
                    <div id="messages" style="height:300px; overflow-y:auto; border:1px solid #ccc; padding:5px;"></div>
                    <div class="input-group mt-2">
                        <input type="text" id="msgbox" class="form-control" placeholder="Type a message">
                        <button id="btnSendMsg" class="btn btn-primary">Send</button>
                    </div>
                </div>
            </div>

            <div class="mt-3">
                <button id="start-recording" class="btn btn-danger">Start Recording</button>
                <button id="download-video" class="btn btn-success" disabled>Download Recording</button>
            </div>
        </div>
    </main>

    <script>
        $(function () {
            const urlParams = new URLSearchParams(window.location.search);
            const meetingID = urlParams.get('meetingID');
            let userID = urlParams.get('uid');
            
            if (!userID) userID = prompt('Enter your nickname');
            if (!meetingID || !userID) {
                $("#meetingbox").show();
                $("#meetingContainer").hide();
                return;
            }

            // Show meeting container
            $("#meetingContainer").show();
            
            // Global variables
            const socket = io();
            let localStream;
            let peers = {};
            let mediaRecorder;
            let recordedBlobs = [];

            // Initialize media and connection
            initMedia();

            async function initMedia() {
                try {
                    // Get user media
                    localStream = await navigator.mediaDevices.getUserMedia({ 
                        video: true, 
                        audio: true 
                    });
                    
                    // Set local video
                    const localVideo = document.getElementById('localVideoCtr');
                    localVideo.srcObject = localStream;
                    
                    // Set user name
                    document.querySelector('#me .user-name').textContent = userID;
                    
                    // Notify server of joining
                    socket.emit('joinMeeting', { meetingID, userID });
                    
                    // Setup event listeners
                    setupEventListeners();
                    
                } catch (err) {
                    console.error('Error accessing media devices.', err);
                    alert("Could not access camera/mic. Please allow permissions.");
                }
            }

            function setupEventListeners() {
                // Handle new users joining
                socket.on('userJoined', ({ userID: newUserID }) => {
                    if (newUserID !== userID && !peers[newUserID]) {
                        createOffer(newUserID);
                    }
                });

                // Handle signaling data
                socket.on('signal', async ({ from, data }) => {
                    if (!peers[from]) {
                        await createPeerConnection(from, false);
                    }
                    if (peers[from].pc) {
                        peers[from].pc.signal(data);
                    }
                });

                // Handle existing participants when joining
                socket.on('existingParticipants', participants => {
                    participants.forEach(async participantID => {
                        if (participantID !== userID && !peers[participantID]) {
                            await createOffer(participantID);
                        }
                    });
                });

                // Handle user leaving
                socket.on('userLeft', ({ userID: leftID }) => {
                    removeRemoteVideo(leftID);
                });

                // Handle chat messages
                socket.on('newMessage', ({ user, message }) => {
                    const msgDiv = document.createElement('div');
                    msgDiv.textContent = `${user}: ${message}`;
                    document.getElementById('messages').appendChild(msgDiv);
                    document.getElementById('messages').scrollTop = document.getElementById('messages').scrollHeight;
                });

                // Chat send button
                $('#btnSendMsg').on('click', sendMessage);
                $('#msgbox').on('keypress', function(e) {
                    if (e.which === 13) {
                        sendMessage();
                    }
                });

                // Recording buttons
                $('#start-recording').on('click', startRecording);
                $('#download-video').on('click', downloadRecording);
            }

            function sendMessage() {
                const message = $('#msgbox').val().trim();
                if (message !== '') {
                    socket.emit('sendMessage', { 
                        meetingID: meetingID, 
                        user: userID, 
                        message: message 
                    });
                    $('#msgbox').val('');
                }
            }

            // WebRTC functions
            async function createPeerConnection(peerID, isInitiator) {
                const pc = new SimplePeer({
                    initiator: isInitiator,
                    trickle: false,
                    stream: localStream
                });

                pc.on('signal', data => {
                    socket.emit('signal', { to: peerID, from: userID, data });
                });

                pc.on('stream', remoteStream => {
                    addRemoteVideo(peerID, remoteStream);
                });

                pc.on('close', () => {
                    removeRemoteVideo(peerID);
                });

                pc.on('error', err => {
                    console.error('Peer connection error:', err);
                    removeRemoteVideo(peerID);
                });

                peers[peerID] = { pc };
                return pc;
            }

            async function createOffer(peerID) {
                await createPeerConnection(peerID, true);
            }

            function addRemoteVideo(peerID, stream) {
                // Remove if already exists
                const existingVideo = document.getElementById('remote_' + peerID);
                if (existingVideo) {
                    existingVideo.remove();
                }
                
                // Create new remote video element
                const template = document.getElementById('remoteTemplate');
                const clone = template.cloneNode(true);
                clone.style.display = 'flex';
                clone.id = 'remote_' + peerID;
                clone.querySelector('h5').textContent = peerID;
                clone.querySelector('video').srcObject = stream;
                
                document.getElementById('divUsers').appendChild(clone);
                updateParticipantsList();
            }

            function removeRemoteVideo(peerID) {
                const remoteElement = document.getElementById('remote_' + peerID);
                if (remoteElement) {
                    remoteElement.remove();
                }
                if (peers[peerID]) {
                    if (peers[peerID].pc) {
                        peers[peerID].pc.destroy();
                    }
                    delete peers[peerID];
                }
                updateParticipantsList();
            }

            function updateParticipantsList() {
                const list = document.getElementById('participantsList');
                list.innerHTML = '';
                
                // Add current user
                const currentUserLi = document.createElement('li');
                currentUserLi.classList.add('list-group-item');
                currentUserLi.textContent = userID + ' (You)';
                list.appendChild(currentUserLi);
                
                // Add other participants
                Object.keys(peers).forEach(peerID => {
                    const li = document.createElement('li');
                    li.classList.add('list-group-item');
                    li.textContent = peerID;
                    list.appendChild(li);
                });
            }

            // Recording functions
            function startRecording() {
                if (!localStream) {
                    alert("No local stream to record");
                    return;
                }

                recordedBlobs = [];
                try {
                    mediaRecorder = new MediaRecorder(localStream, { 
                        mimeType: 'video/webm;codecs=vp9,opus' 
                    });
                } catch (e) {
                    console.error(e);
                    mediaRecorder = new MediaRecorder(localStream);
                }

                mediaRecorder.ondataavailable = e => {
                    if (e.data && e.data.size > 0) {
                        recordedBlobs.push(e.data);
                    }
                };

                mediaRecorder.start();
                $('#start-recording').text('Stop Recording');
                $('#start-recording').off('click').on('click', stopRecording);
                $('#download-video').prop('disabled', true);
            }

            function stopRecording() {
                if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                    mediaRecorder.stop();
                }
                $('#start-recording').text('Start Recording');
                $('#start-recording').off('click').on('click', startRecording);
                $('#download-video').prop('disabled', false);
            }

            function downloadRecording() {
                if (recordedBlobs.length === 0) {
                    alert("No recording available to download");
                    return;
                }

                const blob = new Blob(recordedBlobs, { type: 'video/webm' });
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = 'recording-' + new Date().toISOString() + '.webm';
                document.body.appendChild(a);
                a.click();
                setTimeout(() => {
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(url);
                }, 100);
            }
        });
    </script>

    <style>
        .video-box {
            width: 100%;
            max-width: 250px;
            height: auto;
            background: black;
        }

        .userbox {
            margin: 5px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        @media screen and (max-width: 768px) {
            .top-remote-video-show-wrap {
                flex-direction: column;
            }

            #meetingContainer {
                flex-basis: 100% !important;
            }

            .g-right-details-wrap {
                flex-basis: 100% !important;
                margin-top: 10px;
            }
        }
    </style>
</body>
</html>
